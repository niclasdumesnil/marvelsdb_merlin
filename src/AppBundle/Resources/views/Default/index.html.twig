{% extends 'AppBundle::layout.html.twig' %}
{% import "AppBundle::macros.html.twig" as macros %}

{% block body %}

<div class="beta-banner">BETA</div>

<div class="main container">
<h1 class="site-title hidden-xs">FAN MADE MCDB</h1>
<div class="site-slogan">
    Deckbuilder and Card Database with Custom Content for the Marvel Champions LCG
    <br>Marvellous Community - 
    <span style="font-size: 1em; color: #1976d2; font-weight: bold;">
        Users registered : {{ user_count }}
    </span>
	</br>
</div>
<div></div>
</div> <!-- .container -->

<style>
	.box {
		margin: 5px;
		background: #fff;
		overflow: hidden;
	}
	.front-block {
		display: flex;
		align-items: stretch;
		flex-direction: row;
		justify-content: space-between;
		gap: 0.4rem;
	}
	.front-block > div {
		flex: 1;
	}
	.card-day-decklists {
		display: grid;
		grid-template-columns: 1fr 1fr;
	}
	@media (max-width:992px){
		.front-block {
			flex-direction: column;
		}
		.card-day-decklists {
		display: flex;
		flex-direction: column;
		}
	}

	.beta-banner {
    position: fixed;
    top: 40px;
    right: -60px;
    z-index: 9999;
    width: 240px;
    text-align: center;
    background: #1976d2;
    color: #fff;
    font-size: 2rem;
    font-weight: bold;
    letter-spacing: 0.2em;
    padding: 12px 0;
    transform: rotate(45deg);
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    pointer-events: none;
    user-select: none;
}

</style>

<div class="main container front-block">
	<div style="display: flex; flex-direction: column; background-image: linear-gradient(100deg, rgba(159, 159, 159, 0.5) 49.5%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.2) 51%, rgba(200, 200, 200, 0.5) 51.5%, rgba(200, 200, 200, 0.5) 100%); border-radius: 5px; padding: 0.5rem;">
		<header style="display: flex; align-items: center; gap: 1rem; justify-content: space-between; padding: 1rem;">
			<div>
				<h5 style="font-size: 16px; padding: 0;"></h5>
				<h4 style="font-size: 30px; display: flex; align-items: center; gap: 1rem; justify-content: space-between; margin: 0;">
					<a href="/decklists?sort=popular">Popular Decks</a>
				</h4>
			</div>
		</header>
		{% for data in decklists_by_popular %}
			{{ macros.decklist_block(data) }}
		{% endfor %}
	</div>

	{{ macros.hero_highlight(hero_highlight, hero_highlight_meta, decklists_by_hero) }}

	<div style="display: flex; flex-direction: column; background-image: linear-gradient(100deg, rgba(159, 159, 159, 0.5) 49.5%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.2) 51%, rgba(200, 200, 200, 0.5) 51.5%, rgba(200, 200, 200, 0.5) 100%); border-radius: 5px; padding: 0.5rem;">
		<header style="display: flex; align-items: center; gap: 1rem; justify-content: space-between; padding: 1rem;">
			<div>
				<h5 style="font-size: 16px; padding: 0;"></h5>
				<h4 style="font-size: 30px; display: flex; align-items: center; gap: 1rem; justify-content: space-between; margin: 0;">
					<a href="/decklists?sort=date">Recent Decks</a>
				</h4>
			</div>
		</header>
		{% for data in decklists_by_recent %}
			{{ macros.decklist_block(data) }}
		{% endfor %}
	</div>
</div>

<div class="main container">
	<div style="background-image: linear-gradient(100deg, rgba(159, 159, 159, 0.5) 49.5%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.2) 51%, rgba(200, 200, 200, 0.5) 51.5%, rgba(200, 200, 200, 0.5) 100%); border-radius: 5px; padding: 0.5rem;">
		<div class="front-block">
			<div style="flex: 0; padding: 0.5rem;">
				<header style="display: flex; align-items: center; gap: 1rem; justify-content: space-between; padding: 0.5rem;">
					<div>
						<h5 style="font-size: 16px; padding: 0;">Card of the day</h5>
						<h4 style="font-size: 30px; display: flex; align-items: center; gap: 1rem; justify-content: space-between; margin: 0;">
							<a href="/decklists?sort=popular&cards[]={{card_of_the_day.code}}">{{card_of_the_day.name}}{% if card_of_the_day.subname %}: {{card_of_the_day.subname}}{% endif %}</a>
						</h4>
					</div>
				</header>
				{% if card_of_the_day.imagesrc %}
					<img src="{{ card_of_the_day.imagesrc }}" alt="{{ card_of_the_day.name }}" class="img-responsive img-vertical-card" style="margin:auto">
				{% else %}
					<div class="no-image" style="margin:auto"><div class="no-image-text">No image</div></div>
				{% endif %}
			</div>
			<div class="card-day-decklists">
				{% for data in card_of_the_day_decklists %}
					{{ macros.decklist_block(data) }}
				{% endfor %}
			</div>
		</div>
	</div>
</div>
                            
<div class="main container">
    <h3 style="margin-bottom: 0;">Last Fan made Packs</h3>
    <br>
    <div style="display: flex; justify-content: space-between; align-items: center; margin: 1em 0;">
        <div style="display: flex; align-items: center;">
            <label for="fanpacks-sort" style="font-weight: bold; margin-right: 0.5em;">Sort:</label>
            <select id="fanpacks-sort" style="min-width: 220px;">
                <option value="date">Sort by release date</option>
                <option value="creator">Sort by creator</option>
                <option value="alpha">Sort alphabetically</option>
            </select>
        </div>
        <span style="display:inline-block; width:2em;"></span>
        <div style="display: flex; gap: 1em;">
            <div id="fanpacks-status-filters" style="display: flex; gap: 0.5em;">
                <button type="button" class="fanpacks-status-btn active" data-status="alpha">Alpha</button>
                <button type="button" class="fanpacks-status-btn active" data-status="beta">Beta</button>
                <button type="button" class="fanpacks-status-btn active" data-status="released">Released</button>
                <button type="button" class="fanpacks-status-btn active" data-status="sealed">Sealed</button>
            </div>
            <span style="display:inline-block; width:2em;"></span>
            <div id="fanpacks-type-filters" style="display: flex; gap: 0.5em;">
                <button type="button" class="fanpacks-type-btn active" data-type="hero_fanmade">Hero</button>
                <button type="button" class="fanpacks-type-btn active" data-type="fm_theme">Theme</button>
                <button type="button" class="fanpacks-type-btn active" data-type="scenar_fanmade">Scenario</button>
                <button type="button" class="fanpacks-type-btn active" data-type="fm_story">Campaign</button>
            </div>
        </div>
    </div>
    <nav id="fanpacks-pagination-top" class="pagination" style="margin:2em 0; text-align:center;"></nav>
    <div class="pack-plane-grid-3">
        {% set max_height = 0 %}
        {% for pack in packs %}
            <div class="pack-plane"
                data-release="{{ pack.dateRelease ? pack.dateRelease|date('Y-m-d') : '' }}"
                data-creator="{{ pack.creator|lower }}"
                data-alpha="{{ pack.name|lower }}"
                data-type="{{ pack.packType.code }}"
                data-status="{{ pack.status is defined ? pack.status|lower : '' }}">
                <span class="tag creator">{{ pack.creator }}</span>
                {% if pack.status is defined and pack.status %}
                    <span class="tag status-{{ pack.status }}">
                        {{ pack.status|capitalize }}
                    </span>
                {% endif %}
                <div class="pack-plane-image-container" style="position: relative;">
                    <a href="/set/{{ pack.code }}/spoiler">
                        <img class="pack-plane-image" src="{{ asset('bundles/packs/' ~ pack.code ~ '.jpg') }}" alt="{{ pack.name }}" crossorigin="anonymous">
                    </a>
                </div>
                <div class="pack-plane-title" style="min-height: {{ max_height * 32 }}px; position: relative;">
                    {{ pack.name|length > 24 ? pack.name|slice(0,24) ~ '<br>' ~ pack.name|slice(24) : pack.name|e('html') }}
                    {% if pack.language is defined and pack.language == 'fr' %}
                        <img src="https://upload.wikimedia.org/wikipedia/commons/6/62/Flag_of_France.png"
                             alt="FR" title="French only"
                             style="height: 12px; width: 16px; margin-left: 0.2em; vertical-align: middle; position: relative; top: -10px;">
                    {% endif %}
                </div>
                <div class="pack-plane-footer">
                    {% set display_date = '' %}
                    {% if pack.dateRelease is defined and pack.dateRelease %}
                        {% set display_date = pack.dateRelease|date('Y-m-d') %}
                    {% endif %}
                    <span class="pack-plane-date">
                        {{ display_date }}
                    </span>
                    <span class="
                        {% if pack.packType.code == 'hero_fanmade' %}
                            pack-type-name-hero
                        {% elseif pack.packType.code == 'fm_theme' %}
                            pack-type-name-theme
                        {% elseif pack.packType.code == 'scenar_fanmade' %}
                            pack-type-name-scenario
                        {% elseif pack.packType.code == 'fm_story' %}
                            pack-type-name-campaign
                        {% else %}
                            pack-plane-type
                        {% endif %}
                    ">
                        {{ pack.packType.name }}
                    </span>
                    <span class="pack-plane-size">
                        {% if pack.size is defined and pack.size %}Pack Size: {{ pack.size }}{% endif %}
                    </span>
                </div>
            </div>
        {% endfor %}
    </div>
  
</div>

<style>
.pack-plane-grid-3 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
}
.pack-plane-grid-5 {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 2rem;
}
.pack-plane {
    width: 100%;
    min-width: 0;
    max-width: 340px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
}
@media (max-width: 1200px) {
    .pack-plane-grid-5 {
        grid-template-columns: repeat(3, 1fr);
    }
}
@media (max-width: 900px) {
    .pack-plane-grid-3,
    .pack-plane-grid-5 {
        grid-template-columns: repeat(2, 1fr);
    }
}
@media (max-width: 600px) {
    .pack-plane-grid-3,
    .pack-plane-grid-5 {
        grid-template-columns: 1fr;
    }
}
</style>

<div class="main container">
	<h3>Recent Updates</h3>
	<ul>
		<li>
		<b>	Adding fan made functions to the site and revamp it.</b>
		</li>
		<li>
			Revamped the private decks page to include more filtering and be similar to the deck lists page.
		</li>
		<li>
			Revamped the decklist pages to be easier to find decks without resorting to advanced searching and hopefully make it much better on mobile.			
		</li>
		<li>
			The hero highlight should change each month, going through the heroes roughly in release order, hopefully it helps highlight more decks of interest!
		</li>
		<li>
			Added a bit of color to the deck view, and hopefully made it nicer to look at a deck on mobile.
		</li>
		<li>
			Updated the front page to try to better show off more decks. Feedback welcome.
		</li>
		<li>
			Site Created!
		</li>
	</ul>
</div> <!-- .container -->

{% endblock %}

{% block javascripts %}
<script type="application/ld+json">
{
	 "@context": "http://schema.org",
	 "@type": "WebSite",
	 "url": "https://marvelsdb.com/",
	 "potentialAction": {
		 "@type": "SearchAction",
		 "target": "http://marvelsdb.com/find?q={search_term_string}",
		 "query-input": "required name=search_term_string"
	 }
}
</script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const select = document.getElementById('fanpacks-sort');
    const grid = document.querySelector('.pack-plane-grid-3');
    const packs = Array.from(grid.children);
    const packsPerPage = 9;
    let currentPage = 1;

    function getActiveTypes() {
        return Array.from(document.querySelectorAll('.fanpacks-type-btn.active')).map(btn => btn.dataset.type);
    }
    function getActiveStatuses() {
        return Array.from(document.querySelectorAll('.fanpacks-status-btn.active')).map(btn => btn.dataset.status);
    }

    function sortPacks(mode, filtered) {
        filtered.sort(function(a, b) {
            if (mode === 'date') {
                return a.dataset.release < b.dataset.release ? 1 : -1;
            }
            if (mode === 'creator') {
                return a.dataset.creator.localeCompare(b.dataset.creator);
            }
            if (mode === 'alpha') {
                return a.dataset.alpha.localeCompare(b.dataset.alpha);
            }
            return 0;
        });
    }

    function getFilteredAndSorted() {
        const activeTypes = getActiveTypes();
        const activeStatuses = getActiveStatuses();
        const filtered = packs.filter(p =>
            activeTypes.includes(p.dataset.type) &&
            activeStatuses.includes(p.dataset.status)
        );
        sortPacks(select.value, filtered);
        filtered.forEach(p => grid.appendChild(p));
        return filtered;
    }

    function showPage(page, filtered) {
        filtered.forEach((p, i) => {
            p.style.display = (i >= (page-1)*packsPerPage && i < page*packsPerPage) ? '' : 'none';
        });
        // Hide others
        packs.filter(p => !filtered.includes(p)).forEach(p => p.style.display = 'none');
        // Update pagination links (top and bottom)
        const totalPages = Math.ceil(filtered.length / packsPerPage);
        ['fanpacks-pagination-top', 'fanpacks-pagination'].forEach(function(navId) {
            const pagNav = document.getElementById(navId);
            if (pagNav) {
                pagNav.innerHTML = '';
                for (let p=1; p<=totalPages; ++p) {
                    if (p === page) {
                        pagNav.innerHTML += `<span style="font-weight:bold; color:#1976d2; margin:0 0.5em;">${p}</span>`;
                    } else {
                        pagNav.innerHTML += `<a href="#" class="fanpacks-page-link" data-page="${p}" style="margin:0 0.5em;">${p}</a>`;
                    }
                }
                Array.from(pagNav.querySelectorAll('.fanpacks-page-link')).forEach(link => {
                    link.onclick = function(e) {
                        e.preventDefault();
                        currentPage = parseInt(this.dataset.page);
                        showPage(currentPage, filtered);
                    };
                });
            }
        });
    }

    function updateDisplay(resetPage = false) {
        const filtered = getFilteredAndSorted();
        const totalPages = Math.ceil(filtered.length / packsPerPage);
        if (resetPage || currentPage > totalPages) currentPage = 1;
        showPage(currentPage, filtered);
    }

    if (select && grid) {
        select.addEventListener('change', function() {
            updateDisplay(true); // reset page on sort
        });
        document.querySelectorAll('.fanpacks-type-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                btn.classList.toggle('active');
                updateDisplay(true); // reset page on filter
            });
        });
        document.querySelectorAll('.fanpacks-status-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                btn.classList.toggle('active');
                updateDisplay(true); // reset page on filter
            });
        });
        // Tri initial par date et tous types cochés
        updateDisplay(true);
    }
});
</script>
<nav id="fanpacks-pagination" class="pagination" style="margin:2em 0; text-align:center;"></nav>
{% endblock %}
