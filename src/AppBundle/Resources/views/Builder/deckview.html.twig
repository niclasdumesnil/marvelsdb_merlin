{% extends 'AppBundle::layout.html.twig' %}
{% import "AppBundle::macros.html.twig" as macros %}

{% block javascripts %}
	{% javascripts '@AppBundle/Resources/public/js/ui.deckview.js' %}
	<script src="{{ asset_url }}"></script>
	{% endjavascripts %}
	<script type="text/javascript">
	app.deck && app.deck.init({{ deck|json_encode|raw }});
	app.deck_history && app.deck_history.init({{ deck.history|json_encode|raw }});
	</script>
	<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
	<script type="text/javascript">
	document.addEventListener('DOMContentLoaded', function() {
	    var btn = document.getElementById('btn-deck-image');
	    if (btn) {
	        btn.addEventListener('click', function() {
	            var deckDiv = document.getElementById('deck');
	            html2canvas(deckDiv).then(function(canvas) {
	                // Marges définies par l'utilisateur
	                var cropLeft = 18;   // pixels à rogner à gauche
	                var cropRight = 18;  // pixels à rogner à droite
	                var cropTop = 3;     // pixels à rogner en haut
	                var cropBottom = 18; // pixels à rogner en bas

	                var cropWidth = canvas.width - cropLeft - cropRight;
	                var cropHeight = canvas.height - cropTop - cropBottom;

	                // Canvas pour l'image rognée
	                var croppedCanvas = document.createElement('canvas');
	                croppedCanvas.width = cropWidth;
	                croppedCanvas.height = cropHeight;
	                var ctx = croppedCanvas.getContext('2d');
	                ctx.drawImage(
	                    canvas,
	                    cropLeft, cropTop,
	                    cropWidth, cropHeight,
	                    0, 0,
	                    cropWidth, cropHeight
	                );

	                // Ajustement de la taille en pourcentage (exemple : 60%)
	                var scale = 0.8;
	                var scaledCanvas = document.createElement('canvas');
	                scaledCanvas.width = Math.round(cropWidth * scale);
	                scaledCanvas.height = Math.round(cropHeight * scale);
	                var scaledCtx = scaledCanvas.getContext('2d');
	                scaledCtx.drawImage(
	                    croppedCanvas,
	                    0, 0, cropWidth, cropHeight,
	                    0, 0, scaledCanvas.width, scaledCanvas.height
	                );

	                var link = document.createElement('a');
	                var deckName = document.getElementById('deck-name');
	                var name = deckName ? deckName.textContent.trim().replace(/\s+/g, '_') : 'deck';
	                link.download = name + '.jpg';
	                link.href = scaledCanvas.toDataURL('image/jpeg');
	                link.click();
	            });
	        });
	    }
	});
	</script>
{% endblock %}

{% block body %}


<div class="main white container">

	<div class="row">
		<div class="col-md-12">
			<h1 id="deck-name">{{ deck.name }} 
				
			</h1>
			{% if deck.problem %}
			<div class="alert alert-danger" role="alert">{{ deck_validation_helper.problemLabel(deck.problem) }}</div>
			{% endif %}
		</div>
	</div>
	
	<div class="row">

		<!-- Deck Contents -->
		<div class="col-md-6" id="deck">
		</div>
		<!-- End Deck Contents -->
		

		<!-- Build Controls -->
		<div class="col-md-6 hidden-print">
				

			<div style="margin-bottom:20px" id="btn-group-deck">
				<div style="margin-bottom:5px">
					<div style="margin-bottom:5px">
						<button type="button" id="btn-deck-image" class="btn" style="background-color: #000; color: #fff;">
							<span class="fa fa-image"></span> Deck Image
						</button>
					</div>
					{% if is_owner and editable %}
					<a href="{{ path('deck_edit', {deck_id:deck_id}) }}" class="btn btn-primary"><span class="fa fa-pencil"></span> Edit</a>
					<a href="{{ path('deck_publish_form', {deck_id:deck_id}) }}" id="btn-publish" class="btn btn-success"><span class="fa fa-share"></span> Publish</a>
					<button type="button" id="btn-delete" class="btn btn-danger"><span class="fa fa-trash"></span> Delete {% if deck.previousDeck %}upgrade{% endif %}</button>
					{% endif %}

					<a href="{{ path('deck_clone', {deck_id:deck_id}) }}" id="btn-clone" class="btn btn-info"><span class="fa fa-clone"></span> Clone</a>
					<!-- Ajoute le bouton Deck image où tu veux dans la page -->
					
				</div>
					<div>
					<div class="btn-group">
						<button type="button" class="btn btn-default dropdown-toggle " data-toggle="dropdown">
							<span class="fa fa-sort"></span> <span class="hidden-xs">Sort</span> <span class="caret"></span>
						</button>
						<ul class="dropdown-menu" role="menu" id="menu-sort">
							<li><a href="#" onclick="app.deck.change_sort('default')" id="btn-sort-default">by Type</a></li>
							<li><a href="#" onclick="app.deck.change_sort('name')" id="btn-sort-name">by Name</a></li>
							<li><a href="#" onclick="app.deck.change_sort('number')" id="btn-sort-faction">by Card Number</a></li>
							<li><a href="#" onclick="app.deck.change_sort('cost')" id="btn-sort-faction">by Cost</a></li>
							<li><a href="#" onclick="app.deck.change_sort('set')" id="btn-sort-position">by Set, then Name</a></li>
							<li><a href="#" onclick="app.deck.change_sort('settype')" id="btn-sort-position">by Set, then Type</a></li>
							<li><a href="#" onclick="app.deck.change_sort('setnumber')" id="btn-sort-position">by Set, then Card Number</a></li>
							<li><a href="#" onclick="app.deck.change_sort('faction')" id="btn-sort-faction">by Aspect, then Name</a></li>
							<li><a href="#" onclick="app.deck.change_sort('factiontype')" id="btn-sort-faction">by Aspect, then Type</a></li>
							<li><a href="#" onclick="app.deck.change_sort('factioncost')" id="btn-sort-faction">by Aspect, then Cost</a></li>
							<li><a href="#" onclick="app.deck.change_sort('factionnumber')" id="btn-sort-faction">by Aspect, then Card Number</a></li>
						</ul>
					</div>
					<button type="button" id="btn-print" class="btn btn-default"><span class="fa fa-print"></span> Print</button>
					<div class="btn-group">
						<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
							<span class="fa fa-download"></span> Download <span class="caret"></span>
						</button>
						<ul class="dropdown-menu" role="menu">
							<li><a href="{{ path('deck_export_text', {deck_id:deck_id}) }}">Text file</a></li>
							<li><a {% if not octgnable %} onclick="window.alert('Warning: Some cards from this deck are missing OCTGN IDs (most likely the latest cards or the special random basic weakness card)')" {% endif %}href="{{ path('deck_export_octgn', {deck_id:deck_id}) }}">Octgn file</a></li>
						</ul>
					</div>
				</div>
			</div>

			
			<p>
				Version {{ deck.version }}
			</p>

			<!-- Description -->
			<div class="panel panel-default">
			  <div class="panel-heading">
			    <h3 class="panel-title">Description</h3>
			  </div>
			  <div class="panel-body" id="description">
			  </div>
			</div>
			<!-- Description -->

			{% include 'AppBundle:Builder:deck-charts.html.twig' %}
			{% include 'AppBundle:Builder:draw-simulator.html.twig' %}

			<!-- Published decklists Table -->
			<table class="table table-condensed" id="table-predecessor">
				<thead>
					<tr><th colspan="4"><span class="fa fa-share"></span> Published versions</th></tr>
				</thead>
				<tbody>
				{% if deck.children|length %}
				{% for decklist in deck.children %}
					{{ macros.decklist_table_row(decklist) }}
				{% endfor %}
				{% else %}
					<tr><td>None.</td></tr>
				{% endif %}
				</tbody>
			</table>
			<!-- Published decklists Table -->

		</div>
		<!-- End Build Controls -->

	</div><!-- .row -->
</div><!-- .container -->

{% include 'AppBundle:Modale:odds.html.twig' %}
{% include 'AppBundle:Modale:delete.html.twig' %}
{% include 'AppBundle:Modale:upgrade.html.twig' %}
{% include 'AppBundle:Modale:export.html.twig' %}

{% endblock %}